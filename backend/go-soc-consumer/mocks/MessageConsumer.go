// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/liwaisi-tech/iot-server-smart-irrigation/backend/go-soc-consumer/internal/domain/ports/events"
	mock "github.com/stretchr/testify/mock"
)

// NewMockMessageConsumer creates a new instance of MockMessageConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessageConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessageConsumer {
	mock := &MockMessageConsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMessageConsumer is an autogenerated mock type for the MessageConsumer type
type MockMessageConsumer struct {
	mock.Mock
}

type MockMessageConsumer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessageConsumer) EXPECT() *MockMessageConsumer_Expecter {
	return &MockMessageConsumer_Expecter{mock: &_m.Mock}
}

// IsConnected provides a mock function for the type MockMessageConsumer
func (_mock *MockMessageConsumer) IsConnected() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsConnected")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockMessageConsumer_IsConnected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsConnected'
type MockMessageConsumer_IsConnected_Call struct {
	*mock.Call
}

// IsConnected is a helper method to define mock.On call
func (_e *MockMessageConsumer_Expecter) IsConnected() *MockMessageConsumer_IsConnected_Call {
	return &MockMessageConsumer_IsConnected_Call{Call: _e.mock.On("IsConnected")}
}

func (_c *MockMessageConsumer_IsConnected_Call) Run(run func()) *MockMessageConsumer_IsConnected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessageConsumer_IsConnected_Call) Return(b bool) *MockMessageConsumer_IsConnected_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockMessageConsumer_IsConnected_Call) RunAndReturn(run func() bool) *MockMessageConsumer_IsConnected_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockMessageConsumer
func (_mock *MockMessageConsumer) Start(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMessageConsumer_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockMessageConsumer_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMessageConsumer_Expecter) Start(ctx interface{}) *MockMessageConsumer_Start_Call {
	return &MockMessageConsumer_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockMessageConsumer_Start_Call) Run(run func(ctx context.Context)) *MockMessageConsumer_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMessageConsumer_Start_Call) Return(err error) *MockMessageConsumer_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMessageConsumer_Start_Call) RunAndReturn(run func(ctx context.Context) error) *MockMessageConsumer_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockMessageConsumer
func (_mock *MockMessageConsumer) Stop(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMessageConsumer_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockMessageConsumer_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMessageConsumer_Expecter) Stop(ctx interface{}) *MockMessageConsumer_Stop_Call {
	return &MockMessageConsumer_Stop_Call{Call: _e.mock.On("Stop", ctx)}
}

func (_c *MockMessageConsumer_Stop_Call) Run(run func(ctx context.Context)) *MockMessageConsumer_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMessageConsumer_Stop_Call) Return(err error) *MockMessageConsumer_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMessageConsumer_Stop_Call) RunAndReturn(run func(ctx context.Context) error) *MockMessageConsumer_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function for the type MockMessageConsumer
func (_mock *MockMessageConsumer) Subscribe(ctx context.Context, topic string, handler ports.MessageHandler) error {
	ret := _mock.Called(ctx, topic, handler)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ports.MessageHandler) error); ok {
		r0 = returnFunc(ctx, topic, handler)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMessageConsumer_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockMessageConsumer_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - topic string
//   - handler ports.MessageHandler
func (_e *MockMessageConsumer_Expecter) Subscribe(ctx interface{}, topic interface{}, handler interface{}) *MockMessageConsumer_Subscribe_Call {
	return &MockMessageConsumer_Subscribe_Call{Call: _e.mock.On("Subscribe", ctx, topic, handler)}
}

func (_c *MockMessageConsumer_Subscribe_Call) Run(run func(ctx context.Context, topic string, handler ports.MessageHandler)) *MockMessageConsumer_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 ports.MessageHandler
		if args[2] != nil {
			arg2 = args[2].(ports.MessageHandler)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMessageConsumer_Subscribe_Call) Return(err error) *MockMessageConsumer_Subscribe_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMessageConsumer_Subscribe_Call) RunAndReturn(run func(ctx context.Context, topic string, handler ports.MessageHandler) error) *MockMessageConsumer_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// Unsubscribe provides a mock function for the type MockMessageConsumer
func (_mock *MockMessageConsumer) Unsubscribe(topic string) error {
	ret := _mock.Called(topic)

	if len(ret) == 0 {
		panic("no return value specified for Unsubscribe")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(topic)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMessageConsumer_Unsubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unsubscribe'
type MockMessageConsumer_Unsubscribe_Call struct {
	*mock.Call
}

// Unsubscribe is a helper method to define mock.On call
//   - topic string
func (_e *MockMessageConsumer_Expecter) Unsubscribe(topic interface{}) *MockMessageConsumer_Unsubscribe_Call {
	return &MockMessageConsumer_Unsubscribe_Call{Call: _e.mock.On("Unsubscribe", topic)}
}

func (_c *MockMessageConsumer_Unsubscribe_Call) Run(run func(topic string)) *MockMessageConsumer_Unsubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMessageConsumer_Unsubscribe_Call) Return(err error) *MockMessageConsumer_Unsubscribe_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMessageConsumer_Unsubscribe_Call) RunAndReturn(run func(topic string) error) *MockMessageConsumer_Unsubscribe_Call {
	_c.Call.Return(run)
	return _c
}
