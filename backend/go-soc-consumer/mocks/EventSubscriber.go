// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/liwaisi-tech/iot-server-smart-irrigation/backend/go-soc-consumer/internal/domain/ports"
	mock "github.com/stretchr/testify/mock"
)

// NewMockEventSubscriber creates a new instance of MockEventSubscriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventSubscriber(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventSubscriber {
	mock := &MockEventSubscriber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEventSubscriber is an autogenerated mock type for the EventSubscriber type
type MockEventSubscriber struct {
	mock.Mock
}

type MockEventSubscriber_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventSubscriber) EXPECT() *MockEventSubscriber_Expecter {
	return &MockEventSubscriber_Expecter{mock: &_m.Mock}
}

// IsConnected provides a mock function for the type MockEventSubscriber
func (_mock *MockEventSubscriber) IsConnected() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsConnected")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockEventSubscriber_IsConnected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsConnected'
type MockEventSubscriber_IsConnected_Call struct {
	*mock.Call
}

// IsConnected is a helper method to define mock.On call
func (_e *MockEventSubscriber_Expecter) IsConnected() *MockEventSubscriber_IsConnected_Call {
	return &MockEventSubscriber_IsConnected_Call{Call: _e.mock.On("IsConnected")}
}

func (_c *MockEventSubscriber_IsConnected_Call) Run(run func()) *MockEventSubscriber_IsConnected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEventSubscriber_IsConnected_Call) Return(b bool) *MockEventSubscriber_IsConnected_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockEventSubscriber_IsConnected_Call) RunAndReturn(run func() bool) *MockEventSubscriber_IsConnected_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockEventSubscriber
func (_mock *MockEventSubscriber) Start(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEventSubscriber_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockEventSubscriber_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockEventSubscriber_Expecter) Start(ctx interface{}) *MockEventSubscriber_Start_Call {
	return &MockEventSubscriber_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockEventSubscriber_Start_Call) Run(run func(ctx context.Context)) *MockEventSubscriber_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockEventSubscriber_Start_Call) Return(err error) *MockEventSubscriber_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEventSubscriber_Start_Call) RunAndReturn(run func(ctx context.Context) error) *MockEventSubscriber_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockEventSubscriber
func (_mock *MockEventSubscriber) Stop(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEventSubscriber_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockEventSubscriber_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockEventSubscriber_Expecter) Stop(ctx interface{}) *MockEventSubscriber_Stop_Call {
	return &MockEventSubscriber_Stop_Call{Call: _e.mock.On("Stop", ctx)}
}

func (_c *MockEventSubscriber_Stop_Call) Run(run func(ctx context.Context)) *MockEventSubscriber_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockEventSubscriber_Stop_Call) Return(err error) *MockEventSubscriber_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEventSubscriber_Stop_Call) RunAndReturn(run func(ctx context.Context) error) *MockEventSubscriber_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function for the type MockEventSubscriber
func (_mock *MockEventSubscriber) Subscribe(ctx context.Context, subject string, handler ports.MessageHandler) error {
	ret := _mock.Called(ctx, subject, handler)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ports.MessageHandler) error); ok {
		r0 = returnFunc(ctx, subject, handler)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEventSubscriber_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockEventSubscriber_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - subject string
//   - handler ports.MessageHandler
func (_e *MockEventSubscriber_Expecter) Subscribe(ctx interface{}, subject interface{}, handler interface{}) *MockEventSubscriber_Subscribe_Call {
	return &MockEventSubscriber_Subscribe_Call{Call: _e.mock.On("Subscribe", ctx, subject, handler)}
}

func (_c *MockEventSubscriber_Subscribe_Call) Run(run func(ctx context.Context, subject string, handler ports.MessageHandler)) *MockEventSubscriber_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 ports.MessageHandler
		if args[2] != nil {
			arg2 = args[2].(ports.MessageHandler)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockEventSubscriber_Subscribe_Call) Return(err error) *MockEventSubscriber_Subscribe_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEventSubscriber_Subscribe_Call) RunAndReturn(run func(ctx context.Context, subject string, handler ports.MessageHandler) error) *MockEventSubscriber_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// Unsubscribe provides a mock function for the type MockEventSubscriber
func (_mock *MockEventSubscriber) Unsubscribe(ctx context.Context, subject string) error {
	ret := _mock.Called(ctx, subject)

	if len(ret) == 0 {
		panic("no return value specified for Unsubscribe")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, subject)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEventSubscriber_Unsubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unsubscribe'
type MockEventSubscriber_Unsubscribe_Call struct {
	*mock.Call
}

// Unsubscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - subject string
func (_e *MockEventSubscriber_Expecter) Unsubscribe(ctx interface{}, subject interface{}) *MockEventSubscriber_Unsubscribe_Call {
	return &MockEventSubscriber_Unsubscribe_Call{Call: _e.mock.On("Unsubscribe", ctx, subject)}
}

func (_c *MockEventSubscriber_Unsubscribe_Call) Run(run func(ctx context.Context, subject string)) *MockEventSubscriber_Unsubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventSubscriber_Unsubscribe_Call) Return(err error) *MockEventSubscriber_Unsubscribe_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEventSubscriber_Unsubscribe_Call) RunAndReturn(run func(ctx context.Context, subject string) error) *MockEventSubscriber_Unsubscribe_Call {
	_c.Call.Return(run)
	return _c
}
