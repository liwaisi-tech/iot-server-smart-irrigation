// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/liwaisi-tech/iot-server-smart-irrigation/backend/go-soc-consumer/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// NewMockDeviceRegistrationUseCase creates a new instance of MockDeviceRegistrationUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDeviceRegistrationUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDeviceRegistrationUseCase {
	mock := &MockDeviceRegistrationUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDeviceRegistrationUseCase is an autogenerated mock type for the DeviceRegistrationUseCase type
type MockDeviceRegistrationUseCase struct {
	mock.Mock
}

type MockDeviceRegistrationUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDeviceRegistrationUseCase) EXPECT() *MockDeviceRegistrationUseCase_Expecter {
	return &MockDeviceRegistrationUseCase_Expecter{mock: &_m.Mock}
}

// RegisterDevice provides a mock function for the type MockDeviceRegistrationUseCase
func (_mock *MockDeviceRegistrationUseCase) RegisterDevice(ctx context.Context, message *entities.DeviceRegistrationMessage) error {
	ret := _mock.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for RegisterDevice")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.DeviceRegistrationMessage) error); ok {
		r0 = returnFunc(ctx, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDeviceRegistrationUseCase_RegisterDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterDevice'
type MockDeviceRegistrationUseCase_RegisterDevice_Call struct {
	*mock.Call
}

// RegisterDevice is a helper method to define mock.On call
//   - ctx context.Context
//   - message *entities.DeviceRegistrationMessage
func (_e *MockDeviceRegistrationUseCase_Expecter) RegisterDevice(ctx interface{}, message interface{}) *MockDeviceRegistrationUseCase_RegisterDevice_Call {
	return &MockDeviceRegistrationUseCase_RegisterDevice_Call{Call: _e.mock.On("RegisterDevice", ctx, message)}
}

func (_c *MockDeviceRegistrationUseCase_RegisterDevice_Call) Run(run func(ctx context.Context, message *entities.DeviceRegistrationMessage)) *MockDeviceRegistrationUseCase_RegisterDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *entities.DeviceRegistrationMessage
		if args[1] != nil {
			arg1 = args[1].(*entities.DeviceRegistrationMessage)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDeviceRegistrationUseCase_RegisterDevice_Call) Return(err error) *MockDeviceRegistrationUseCase_RegisterDevice_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDeviceRegistrationUseCase_RegisterDevice_Call) RunAndReturn(run func(ctx context.Context, message *entities.DeviceRegistrationMessage) error) *MockDeviceRegistrationUseCase_RegisterDevice_Call {
	_c.Call.Return(run)
	return _c
}
