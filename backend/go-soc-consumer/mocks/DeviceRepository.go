// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/liwaisi-tech/iot-server-smart-irrigation/backend/go-soc-consumer/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// NewMockDeviceRepository creates a new instance of MockDeviceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDeviceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDeviceRepository {
	mock := &MockDeviceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDeviceRepository is an autogenerated mock type for the DeviceRepository type
type MockDeviceRepository struct {
	mock.Mock
}

type MockDeviceRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDeviceRepository) EXPECT() *MockDeviceRepository_Expecter {
	return &MockDeviceRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockDeviceRepository
func (_mock *MockDeviceRepository) Delete(ctx context.Context, macAddress string) error {
	ret := _mock.Called(ctx, macAddress)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, macAddress)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDeviceRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockDeviceRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - macAddress string
func (_e *MockDeviceRepository_Expecter) Delete(ctx interface{}, macAddress interface{}) *MockDeviceRepository_Delete_Call {
	return &MockDeviceRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, macAddress)}
}

func (_c *MockDeviceRepository_Delete_Call) Run(run func(ctx context.Context, macAddress string)) *MockDeviceRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDeviceRepository_Delete_Call) Return(err error) *MockDeviceRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDeviceRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, macAddress string) error) *MockDeviceRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type MockDeviceRepository
func (_mock *MockDeviceRepository) Exists(ctx context.Context, macAddress string) (bool, error) {
	ret := _mock.Called(ctx, macAddress)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return returnFunc(ctx, macAddress)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = returnFunc(ctx, macAddress)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, macAddress)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDeviceRepository_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockDeviceRepository_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - macAddress string
func (_e *MockDeviceRepository_Expecter) Exists(ctx interface{}, macAddress interface{}) *MockDeviceRepository_Exists_Call {
	return &MockDeviceRepository_Exists_Call{Call: _e.mock.On("Exists", ctx, macAddress)}
}

func (_c *MockDeviceRepository_Exists_Call) Run(run func(ctx context.Context, macAddress string)) *MockDeviceRepository_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDeviceRepository_Exists_Call) Return(b bool, err error) *MockDeviceRepository_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockDeviceRepository_Exists_Call) RunAndReturn(run func(ctx context.Context, macAddress string) (bool, error)) *MockDeviceRepository_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// FindByMACAddress provides a mock function for the type MockDeviceRepository
func (_mock *MockDeviceRepository) FindByMACAddress(ctx context.Context, macAddress string) (*entities.Device, error) {
	ret := _mock.Called(ctx, macAddress)

	if len(ret) == 0 {
		panic("no return value specified for FindByMACAddress")
	}

	var r0 *entities.Device
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*entities.Device, error)); ok {
		return returnFunc(ctx, macAddress)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *entities.Device); ok {
		r0 = returnFunc(ctx, macAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Device)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, macAddress)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDeviceRepository_FindByMACAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByMACAddress'
type MockDeviceRepository_FindByMACAddress_Call struct {
	*mock.Call
}

// FindByMACAddress is a helper method to define mock.On call
//   - ctx context.Context
//   - macAddress string
func (_e *MockDeviceRepository_Expecter) FindByMACAddress(ctx interface{}, macAddress interface{}) *MockDeviceRepository_FindByMACAddress_Call {
	return &MockDeviceRepository_FindByMACAddress_Call{Call: _e.mock.On("FindByMACAddress", ctx, macAddress)}
}

func (_c *MockDeviceRepository_FindByMACAddress_Call) Run(run func(ctx context.Context, macAddress string)) *MockDeviceRepository_FindByMACAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDeviceRepository_FindByMACAddress_Call) Return(device *entities.Device, err error) *MockDeviceRepository_FindByMACAddress_Call {
	_c.Call.Return(device, err)
	return _c
}

func (_c *MockDeviceRepository_FindByMACAddress_Call) RunAndReturn(run func(ctx context.Context, macAddress string) (*entities.Device, error)) *MockDeviceRepository_FindByMACAddress_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockDeviceRepository
func (_mock *MockDeviceRepository) List(ctx context.Context, offset int, limit int) ([]*entities.Device, error) {
	ret := _mock.Called(ctx, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*entities.Device
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) ([]*entities.Device, error)); ok {
		return returnFunc(ctx, offset, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) []*entities.Device); ok {
		r0 = returnFunc(ctx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Device)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = returnFunc(ctx, offset, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDeviceRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockDeviceRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - offset int
//   - limit int
func (_e *MockDeviceRepository_Expecter) List(ctx interface{}, offset interface{}, limit interface{}) *MockDeviceRepository_List_Call {
	return &MockDeviceRepository_List_Call{Call: _e.mock.On("List", ctx, offset, limit)}
}

func (_c *MockDeviceRepository_List_Call) Run(run func(ctx context.Context, offset int, limit int)) *MockDeviceRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDeviceRepository_List_Call) Return(devices []*entities.Device, err error) *MockDeviceRepository_List_Call {
	_c.Call.Return(devices, err)
	return _c
}

func (_c *MockDeviceRepository_List_Call) RunAndReturn(run func(ctx context.Context, offset int, limit int) ([]*entities.Device, error)) *MockDeviceRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockDeviceRepository
func (_mock *MockDeviceRepository) Save(ctx context.Context, device *entities.Device) error {
	ret := _mock.Called(ctx, device)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.Device) error); ok {
		r0 = returnFunc(ctx, device)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDeviceRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockDeviceRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - device *entities.Device
func (_e *MockDeviceRepository_Expecter) Save(ctx interface{}, device interface{}) *MockDeviceRepository_Save_Call {
	return &MockDeviceRepository_Save_Call{Call: _e.mock.On("Save", ctx, device)}
}

func (_c *MockDeviceRepository_Save_Call) Run(run func(ctx context.Context, device *entities.Device)) *MockDeviceRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *entities.Device
		if args[1] != nil {
			arg1 = args[1].(*entities.Device)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDeviceRepository_Save_Call) Return(err error) *MockDeviceRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDeviceRepository_Save_Call) RunAndReturn(run func(ctx context.Context, device *entities.Device) error) *MockDeviceRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockDeviceRepository
func (_mock *MockDeviceRepository) Update(ctx context.Context, device *entities.Device) error {
	ret := _mock.Called(ctx, device)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.Device) error); ok {
		r0 = returnFunc(ctx, device)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDeviceRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockDeviceRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - device *entities.Device
func (_e *MockDeviceRepository_Expecter) Update(ctx interface{}, device interface{}) *MockDeviceRepository_Update_Call {
	return &MockDeviceRepository_Update_Call{Call: _e.mock.On("Update", ctx, device)}
}

func (_c *MockDeviceRepository_Update_Call) Run(run func(ctx context.Context, device *entities.Device)) *MockDeviceRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *entities.Device
		if args[1] != nil {
			arg1 = args[1].(*entities.Device)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDeviceRepository_Update_Call) Return(err error) *MockDeviceRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDeviceRepository_Update_Call) RunAndReturn(run func(ctx context.Context, device *entities.Device) error) *MockDeviceRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
