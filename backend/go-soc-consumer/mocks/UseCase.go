// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockUseCase creates a new instance of MockUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUseCase {
	mock := &MockUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUseCase is an autogenerated mock type for the UseCase type
type MockUseCase struct {
	mock.Mock
}

type MockUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUseCase) EXPECT() *MockUseCase_Expecter {
	return &MockUseCase_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function for the type MockUseCase
func (_mock *MockUseCase) Execute(ctx context.Context) string {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockUseCase_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockUseCase_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUseCase_Expecter) Execute(ctx interface{}) *MockUseCase_Execute_Call {
	return &MockUseCase_Execute_Call{Call: _e.mock.On("Execute", ctx)}
}

func (_c *MockUseCase_Execute_Call) Run(run func(ctx context.Context)) *MockUseCase_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUseCase_Execute_Call) Return(s string) *MockUseCase_Execute_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockUseCase_Execute_Call) RunAndReturn(run func(ctx context.Context) string) *MockUseCase_Execute_Call {
	_c.Call.Return(run)
	return _c
}
